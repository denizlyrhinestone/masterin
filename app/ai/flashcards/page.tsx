"use client"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Textarea } from "@/components/ui/textarea"
import { Label } from "@/components/ui/label"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { ChevronLeft, ChevronRight, Download, Share2, FileText, Plus, Edit, Trash2, Check, Loader2 } from "lucide-react"

type Flashcard = {
  id: string
  front: string
  back: string
}

export default function FlashcardGenerator() {
  const [inputText, setInputText] = useState("")
  const [subject, setSubject] = useState("science")
  const [difficulty, setDifficulty] = useState("medium")
  const [generating, setGenerating] = useState(false)
  const [currentCardIndex, setCurrentCardIndex] = useState(0)
  const [showingFront, setShowingFront] = useState(true)
  const [editingCard, setEditingCard] = useState<string | null>(null)
  const [editedFront, setEditedFront] = useState("")
  const [editedBack, setEditedBack] = useState("")

  // Sample flashcards (would be generated by AI in a real implementation)
  const [flashcards, setFlashcards] = useState<Flashcard[]>([
    {
      id: "1",
      front: "What is photosynthesis?",
      back: "The process by which green plants and some other organisms use sunlight to synthesize foods with the help of chlorophyll.",
    },
    {
      id: "2",
      front: "What is the law of conservation of energy?",
      back: "Energy can neither be created nor destroyed; it can only be transferred or changed from one form to another.",
    },
    {
      id: "3",
      front: "What is the difference between mitosis and meiosis?",
      back: "Mitosis is cell division that results in two identical daughter cells, while meiosis results in four genetically different daughter cells with half the original number of chromosomes.",
    },
    {
      id: "4",
      front: "What is Newton's First Law of Motion?",
      back: "An object at rest stays at rest, and an object in motion stays in motion with the same speed and direction unless acted upon by an external force.",
    },
    {
      id: "5",
      front: "What is the pH scale?",
      back: "A logarithmic scale used to specify the acidity or basicity of an aqueous solution, ranging from 0 (very acidic) to 14 (very alkaline).",
    },
  ])

  const handleGenerate = () => {
    if (!inputText.trim()) return

    setGenerating(true)
    setCurrentCardIndex(0)
    setShowingFront(true)

    // Simulate AI processing with a timeout
    setTimeout(() => {
      setGenerating(false)
      // In a real implementation, the AI would generate flashcards based on the input text
      // Here we're just using the sample flashcards
    }, 2000)
  }

  const nextCard = () => {
    if (currentCardIndex < flashcards.length - 1) {
      setCurrentCardIndex(currentCardIndex + 1)
      setShowingFront(true)
    }
  }

  const prevCard = () => {
    if (currentCardIndex > 0) {
      setCurrentCardIndex(currentCardIndex - 1)
      setShowingFront(true)
    }
  }

  const flipCard = () => {
    setShowingFront(!showingFront)
  }

  const startEditing = (card: Flashcard) => {
    setEditingCard(card.id)
    setEditedFront(card.front)
    setEditedBack(card.back)
  }

  const saveEdit = (id: string) => {
    setFlashcards(flashcards.map((card) => (card.id === id ? { ...card, front: editedFront, back: editedBack } : card)))
    setEditingCard(null)
  }

  const deleteCard = (id: string) => {
    setFlashcards(flashcards.filter((card) => card.id !== id))
    if (currentCardIndex >= flashcards.length - 1) {
      setCurrentCardIndex(Math.max(0, flashcards.length - 2))
    }
  }

  const addNewCard = () => {
    const newCard = {
      id: Date.now().toString(),
      front: "New flashcard question",
      back: "New flashcard answer",
    }
    setFlashcards([...flashcards, newCard])
    setCurrentCardIndex(flashcards.length)
    setShowingFront(true)
    startEditing(newCard)
  }

  return (
    <div className="container mx-auto py-10 px-4 max-w-6xl">
      <h1 className="text-4xl font-bold mb-2">Flashcard Generator</h1>
      <p className="text-xl text-muted-foreground mb-8">
        Create study flashcards from your notes or any educational content
      </p>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <Card className="lg:col-span-1">
          <CardHeader>
            <CardTitle>Create Flashcards</CardTitle>
            <CardDescription>Generate flashcards from your text or notes</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="input-text">Input Text or Notes</Label>
              <Textarea
                id="input-text"
                placeholder="Paste your notes, textbook content, or any educational material here..."
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                className="min-h-[200px]"
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="subject">Subject</Label>
              <Select value={subject} onValueChange={setSubject}>
                <SelectTrigger>
                  <SelectValue placeholder="Select subject" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="math">Mathematics</SelectItem>
                  <SelectItem value="science">Science</SelectItem>
                  <SelectItem value="history">History</SelectItem>
                  <SelectItem value="language">Language Arts</SelectItem>
                  <SelectItem value="compsci">Computer Science</SelectItem>
                  <SelectItem value="arts">Arts & Humanities</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="difficulty">Difficulty Level</Label>
              <Select value={difficulty} onValueChange={setDifficulty}>
                <SelectTrigger>
                  <SelectValue placeholder="Select difficulty" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="basic">Basic</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="advanced">Advanced</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-2">
              <Label htmlFor="card-count">Number of Flashcards</Label>
              <Select defaultValue="10">
                <SelectTrigger>
                  <SelectValue placeholder="Select count" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="5">5 cards</SelectItem>
                  <SelectItem value="10">10 cards</SelectItem>
                  <SelectItem value="20">20 cards</SelectItem>
                  <SelectItem value="30">30 cards</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
          <CardFooter>
            <Button className="w-full" disabled={generating || !inputText.trim()} onClick={handleGenerate}>
              {generating ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Generating Flashcards...
                </>
              ) : (
                <>
                  <FileText className="mr-2 h-4 w-4" />
                  Generate Flashcards
                </>
              )}
            </Button>
          </CardFooter>
        </Card>

        <Card className="lg:col-span-2">
          <CardHeader>
            <CardTitle>Flashcard Study Deck</CardTitle>
            <CardDescription>
              {flashcards.length > 0
                ? `Card ${currentCardIndex + 1} of ${flashcards.length}`
                : "Your generated flashcards will appear here"}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {flashcards.length > 0 ? (
              <div className="flex flex-col items-center">
                <div
                  className="w-full max-w-xl aspect-[4/3] bg-white dark:bg-gray-800 rounded-xl shadow-lg cursor-pointer transition-all duration-500 perspective-1000"
                  onClick={flipCard}
                  style={{
                    transform: showingFront ? "rotateY(0deg)" : "rotateY(180deg)",
                    transformStyle: "preserve-3d",
                  }}
                >
                  {/* Front of card */}
                  <div
                    className={`absolute inset-0 backface-hidden p-6 flex flex-col ${showingFront ? "visible" : "invisible"}`}
                    style={{ backfaceVisibility: "hidden" }}
                  >
                    <div className="flex-1 flex items-center justify-center">
                      <h3 className="text-xl md:text-2xl font-medium text-center">
                        {editingCard === flashcards[currentCardIndex].id ? (
                          <Textarea
                            value={editedFront}
                            onChange={(e) => setEditedFront(e.target.value)}
                            className="min-h-[100px] text-xl"
                            onClick={(e) => e.stopPropagation()}
                          />
                        ) : (
                          flashcards[currentCardIndex].front
                        )}
                      </h3>
                    </div>
                    <div className="text-sm text-muted-foreground text-center mt-4">Click to flip</div>
                  </div>

                  {/* Back of card */}
                  <div
                    className={`absolute inset-0 backface-hidden p-6 flex flex-col ${!showingFront ? "visible" : "invisible"}`}
                    style={{
                      backfaceVisibility: "hidden",
                      transform: "rotateY(180deg)",
                    }}
                  >
                    <div className="flex-1 flex items-center justify-center">
                      <p className="text-lg md:text-xl">
                        {editingCard === flashcards[currentCardIndex].id ? (
                          <Textarea
                            value={editedBack}
                            onChange={(e) => setEditedBack(e.target.value)}
                            className="min-h-[150px]"
                            onClick={(e) => e.stopPropagation()}
                          />
                        ) : (
                          flashcards[currentCardIndex].back
                        )}
                      </p>
                    </div>
                    <div className="text-sm text-muted-foreground text-center mt-4">Click to flip</div>
                  </div>
                </div>

                <div className="flex items-center justify-center mt-6 space-x-4">
                  <Button variant="outline" size="icon" onClick={prevCard} disabled={currentCardIndex === 0}>
                    <ChevronLeft className="h-4 w-4" />
                  </Button>

                  {editingCard === flashcards[currentCardIndex].id ? (
                    <Button
                      variant="outline"
                      className="px-4"
                      onClick={() => saveEdit(flashcards[currentCardIndex].id)}
                    >
                      <Check className="mr-2 h-4 w-4" />
                      Save
                    </Button>
                  ) : (
                    <Button
                      variant="outline"
                      className="px-4"
                      onClick={() => startEditing(flashcards[currentCardIndex])}
                    >
                      <Edit className="mr-2 h-4 w-4" />
                      Edit
                    </Button>
                  )}

                  <Button
                    variant="outline"
                    className="px-4"
                    onClick={() => deleteCard(flashcards[currentCardIndex].id)}
                  >
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete
                  </Button>

                  <Button
                    variant="outline"
                    size="icon"
                    onClick={nextCard}
                    disabled={currentCardIndex === flashcards.length - 1}
                  >
                    <ChevronRight className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center py-12">
                <div className="text-center text-muted-foreground">
                  {generating ? (
                    <>
                      <Loader2 className="h-10 w-10 animate-spin mx-auto mb-4" />
                      <p>Generating your flashcards...</p>
                    </>
                  ) : (
                    <>
                      <FileText className="h-10 w-10 mx-auto mb-4" />
                      <p>Enter your notes and click "Generate Flashcards" to begin</p>
                    </>
                  )}
                </div>
              </div>
            )}
          </CardContent>
          <CardFooter className="flex flex-wrap gap-2 justify-between">
            <div>
              <Button variant="outline" onClick={addNewCard}>
                <Plus className="mr-2 h-4 w-4" />
                Add Card
              </Button>
            </div>
            <div className="flex gap-2">
              <Button variant="outline" disabled={flashcards.length === 0}>
                <Download className="mr-2 h-4 w-4" />
                Export
              </Button>
              <Button variant="outline" disabled={flashcards.length === 0}>
                <Share2 className="mr-2 h-4 w-4" />
                Share
              </Button>
              <Button disabled={flashcards.length === 0}>Save Deck</Button>
            </div>
          </CardFooter>
        </Card>
      </div>

      <div className="mt-10">
        <h2 className="text-2xl font-bold mb-4">Saved Flashcard Decks</h2>
        <Tabs defaultValue="recent">
          <TabsList className="w-full max-w-md mx-auto">
            <TabsTrigger value="recent">Recent</TabsTrigger>
            <TabsTrigger value="subjects">By Subject</TabsTrigger>
            <TabsTrigger value="shared">Shared</TabsTrigger>
          </TabsList>

          <TabsContent value="recent" className="mt-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {["Biology Fundamentals", "Physics Laws", "Historical Events", "Programming Concepts"].map((deck, i) => (
                <Card key={i} className="hover:shadow-md transition-shadow">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg">{deck}</CardTitle>
                    <CardDescription>{5 + i} cards</CardDescription>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <p className="text-xs text-muted-foreground">
                      Last studied: {i + 1} day{i !== 0 ? "s" : ""} ago
                    </p>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" className="w-full">
                      Study Now
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="subjects" className="mt-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {["Mathematics", "Science", "History", "Computer Science", "Languages", "Arts"].map((subject, i) => (
                <Card key={i} className="hover:shadow-md transition-shadow">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg">{subject}</CardTitle>
                    <CardDescription>
                      {i + 2} deck{i + 2 !== 1 ? "s" : ""}
                    </CardDescription>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <p className="text-xs text-muted-foreground">Total cards: {(i + 2) * 10}</p>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" className="w-full">
                      Browse Decks
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="shared" className="mt-6">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
              {["Chemistry Study Group", "AP History Prep", "Coding Interview Prep"].map((deck, i) => (
                <Card key={i} className="hover:shadow-md transition-shadow">
                  <CardHeader className="pb-2">
                    <CardTitle className="text-lg">{deck}</CardTitle>
                    <CardDescription>Shared by: User{i + 1}</CardDescription>
                  </CardHeader>
                  <CardContent className="pb-2">
                    <p className="text-xs text-muted-foreground">
                      {12 + i * 3} cards • {i + 5} members
                    </p>
                  </CardContent>
                  <CardFooter>
                    <Button variant="outline" className="w-full">
                      Open Deck
                    </Button>
                  </CardFooter>
                </Card>
              ))}
            </div>
          </TabsContent>
        </Tabs>
      </div>
    </div>
  )
}
